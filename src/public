#!/bin/zsh

#
# ~/.public
#

#
# BEGIN vi
#

_vi() {
  unalias vi &> /dev/null ; \
  unalias vim &> /dev/null ; \
  unalias nvim &> /dev/null ; \
  local _VI_EDITOR
  if which nvim &> /dev/null
  then 
    _VI_EDITOR=$(which nvim)
  elif which vim &> /dev/null
  then
    _VI_EDITOR=$(which vim)
  elif which vi &> /dev/null
  then
    _VI_EDITOR=$(which vi)
  fi
  export EDITOR="${_VI_EDITOR}"
  alias vi="_vi"
  alias vim="_vi"
  alias nvim="_vi"
  ${_VI_EDITOR} ${@:-}
}

alias vi='_vi'
alias vim='_vi'
alias nvim='_vi'

#
# END vi
#

#
# BEGIN now
#

_now() {
  local -r _root="${CONFIG_ROOT:-${HOME}/.config/now}"
  if [[ ! -e "${_root}" ]]
  then
    echo -n "Enter absolute path of notes directory: " && \
    read -r _NOW_NOTES_SRC && \
    echo -n "Enter absolute path of todo file: " && \
    read -r _NOW_TODO_SRC && \
    echo -n "Enter absolute path of wip directory: " && \
    read -r _NOW_WIP_SRC && \
    echo -n "Enter absolute path of now directory: " && \
    read -r _NOW_DEST && \
    if [[ -z "${EDITOR}" ]]
    then
      echo -n "Enter editor name: " && \
      read -r _NOW_EDITOR
    else
      _NOW_EDITOR="${EDITOR}"
    fi
    mkdir -p "${_root}"
cat >> "${_root}/now.env" << _EOF
_NOW_NOTES_SRC='${_NOW_NOTES_SRC}'
_NOW_TODO_SRC='${_NOW_TODO_SRC}'
_NOW_WIP_SRC='${_NOW_WIP_SRC}'
_NOW_DEST='${_NOW_DEST}'
_NOW_EDITOR='${_NOW_EDITOR}'
_EOF
  fi
  source "${_root}/now.env"
  local -r _directory="${_NOW_NOTES_SRC}/$(date +%Y)/$(date +%m)/$(date +%d)"
  mkdir -p "${_directory}"
  local -r _file="${_directory}/$(date +%Y-%m-%d).md"
  if [[ ! -e "${_file}" ]]
  then 
    echo "# $(date)" > "${_file}"
  fi
  rm -rf "${_NOW_DEST}"
  mkdir -p "${_NOW_DEST}"
  local -r _link="${_NOW_DEST}"
  ln -sf "${_directory}" "${_NOW_DEST}/$(date +%Y-%m-%d)"
  ln -sf "${_NOW_TODO_SRC}" "${_NOW_DEST}/todo.md"
  ln -sf "${_NOW_WIP_SRC}" "${_NOW_DEST}/wip"
}

alias now='_now'

#
# END now
#

#
# BEGIN homebrew
#

_Homebrew_install() {
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

_Homebrew_uninstall() {
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  brew list | xargs brew uninstall --force
  brew list --cask | xargs brew uninstall --force
  sudo /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
  sudo rm -rf /usr/local
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  brew list | xargs brew uninstall --force
  brew list --cask | xargs brew uninstall --force
  sudo /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
  sudo rm -rf /usr/local
}

_Homebrew_main() {
  case "${1}" in
    "--install")
      _Homebrew_install
    ;;
    "--uninstall")
      _Homebrew_uninstall
    ;;
  esac
}

_homebrew() {
  _Homebrew_main $@
}

alias homebrew='_homebrew'

#
# END homebrew
#